import streamlit as st
import random
import numpy as np

# Initialize session state
if "user_db" not in st.session_state:
    st.session_state.user_db = {
        "student1": "pass123",
        "student2": "mypassword",
        "francesco": "openai"
    }

if "user_data" not in st.session_state:
    st.session_state.user_data = {}

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if "current_user" not in st.session_state:
    st.session_state.current_user = None

def init_user(username):
    if username not in st.session_state.user_data:
        st.session_state.user_data[username] = {
            "grades": {},
            "goals": [],
            "chat_history": []
        }

def login_or_signup():
    st.title("🔐 GradeStore Login / Sign Up")
    option = st.radio("Do you have an account?", ["Login", "Sign Up"])

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if option == "Login":
        if st.button("Login"):
            if username in st.session_state.user_db and st.session_state.user_db[username] == password:
                st.session_state.logged_in = True
                st.session_state.current_user = username
                init_user(username)
                st.success(f"Welcome back, {username}!")
                st.experimental_rerun()
            else:
                st.error("Invalid username or password.")

    elif option == "Sign Up":
        if st.button("Sign Up"):
            if username in st.session_state.user_db:
                st.error("Username already exists. Please choose a different one.")
            elif username == "" or password == "":
                st.error("Username and password cannot be empty.")
            else:
                st.session_state.user_db[username] = password
                init_user(username)
                st.session_state.logged_in = True
                st.session_state.current_user = username
                st.success(f"Account created! Welcome, {username}!")
                st.experimental_rerun()

def gradestore_app():
    st.title(f"📚 GradeStore - Welcome {st.session_state.current_user}!")

    menu = st.sidebar.selectbox("Choose an action", [
        "Add Grade", "View Progress", "Get Study Tips", "Set Goals",
        "Motivation Chatbot", "Test Prep & Time Management", "Grade Predictor", "Logout"
    ])

    user = st.session_state.current_user
    user_grades = st.session_state.user_data[user]["grades"]
    user_goals = st.session_state.user_data[user]["goals"]
    chat_history = st.session_state.user_data[user]["chat_history"]

    grade_responses = {
        "excellent": ["You are amazing bro", "WOW, I gave you good luck, if you disinstall me, your good luck will disappear", "I'm impressed, I taught you well"],
        "good": ["Good job my friend, I knew you were good", "Well done!!!", "C'mon man, YES"],
        "average": ["Well you have passed with a nice mark, congratulations!!", "Well you have passed, congratulations!!", "Close call"],
        "needs_improvement": ["Oh, don’t worry, you just need to do it better next time.", "I will help you if necessary, but you will pass next time.", "You've got this!"]
    }

    study_tips = {
        "math": "Try doing a lot of exercises, they help a lot.",
        "science": "Make sure you understand the concepts and don’t just memorize.",
        "english": "Do a lot of practice exercises.",
        "history": "Focus on memorizing the key dates.",
        "languages": "Try talking to someone in this language.",
        "general": "Study on a daily basis, it helps a lot."
    }

    improvement_strategies = {
        "study_schedule": "Plan everything early so you always know what to do.",
        "test_prep": "Try using previous exams to practice.",
        "homework_tips": "Leave your phone in another room while doing homework.",
        "note_taking": "Only write down what you think is really important.",
        "time_management": "Be productive so you can also have free time."
    }

    def calculate_average(grades_list):
        if not grades_list:
            return 0
        return sum(grades_list) / len(grades_list)

    def get_grade_category(grade):
        if grade >= 9:
            return "excellent"
        elif grade >= 7:
            return "good"
        elif grade >= 5:
            return "average"
        else:
            return "needs_improvement"

    def analyze_sentiment(message):
        message = message.lower()
        positive_words = ["good", "great", "happy", "love", "awesome", "calm", "fun", "joy", "motivated", "excited"]
        negative_words = ["bad", "terrible", "sad", "hate", "awful", "tired", "angry", "anxious", "depressed"]
        negations = ["not", "don't", "no", "never", "didn't", "isn't", "wasn't", "won't", "can't"]

        words = message.split()
        positive_count = 0
        negative_count = 0

        i = 0
        while i < len(words):
            word = words[i]

            if word in negations and i + 1 < len(words):
                next_word = words[i + 1]
                if next_word in positive_words:
                    negative_count += 1
                    i += 2
                    continue
                elif next_word in negative_words:
                    positive_count += 1
                    i += 2
                    continue

            if word in positive_words:
                positive_count += 1
            elif word in negative_words:
                negative_count += 1

            i += 1

        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        else:
            return "neutral"

    if menu == "Add Grade":
        st.header("➕ Add a Grade")
        subject = st.text_input("Subject").lower().strip()
        grade = st.number_input("Grade (0-10)", min_value=0.0, max_value=10.0)

        if st.button("Submit Grade"):
            if subject:
                if subject not in user_grades:
                    user_grades[subject] = []
                user_grades[subject].append(grade)

                category = get_grade_category(grade)
                response = random.choice(grade_responses[category])

                st.success(response)

                avg = calculate_average(user_grades[subject])
                st.info(f"Your current average in **{subject.title()}** is **{avg:.2f}**.")
            else:
                st.error("Please enter a subject.")

    elif menu == "View Progress":
        st.header("📊 View Your Progress")

        if not user_grades:
            st.warning("No grades recorded yet. Add some grades first!")
        else:
            total_grades = 0
            total_count = 0

            for subject, grades in user_grades.items():
                avg = calculate_average(grades)
                st.write(f"**{subject.title()}**: {avg:.2f} (from {len(grades)} grades)")
                total_grades += sum(grades)
                total_count += len(grades)

            overall_avg = total_grades / total_count
            st.subheader(f"Overall Average: {overall_avg:.2f}")

            if overall_avg >= 8:
                st.success("MY FRIEND; WELL DONE! 🔥")
            elif overall_avg >= 6:
                st.info("You are average so keep going 💪")
            else:
                st.warning("Don’t worry, just study a bit more and you'll improve! 💡")

    elif menu == "Get Study Tips":
        st.header("💡 Study Tips")
        subject = st.selectbox("Choose a subject", list(study_tips.keys()))
        st.write(f"**Tip for {subject.title()}:** {study_tips[subject]}")

    elif menu == "Set Goals":
        st.header("🎯 Set Your Academic Goals")
        goal = st.text_input("Enter your academic goal:")

        if st.button("Add Goal"):
            user_goals.append(goal)
            st.success("Goal added! I have full confidence in you.")

        st.subheader("Your Goals:")
        for g in user_goals:
            st.write(f"- {g}")

    elif menu == "Motivation Chatbot":
        st.header("💬 Emotional AI Chatbot")

        greetings = ["hi", "hello", "hey", "good morning", "good afternoon", "good evening"]
        farewells = ["bye", "goodbye", "see you", "see ya", "exit", "quit"]

        positive_responses = [
            "I'm so glad to hear that! Keep that positive energy! 🌟",
            "That's awesome! Keep shining and moving forward! 🚀"
        ]

        negative_responses = [
            "I'm sorry you're feeling that way. Remember, bad days happen but they don't define you. 💪",
            "Don't worry, tough moments pass. I'm here to support you! 🤗"
        ]

        neutral_responses = [
            "Thanks for sharing! Keep going, you're doing great.",
            "Okay! I'm here whenever you need me. 😊"
        ]

        user_message = st.text_input("Talk to your motivational AI:")

        if st.button("Send"):
            if user_message:
                message_lower = user_message.lower()

                if any(greet in message_lower for greet in greetings):
                    ai_response = "Hello! I'm here to motivate you and track your academic journey! 🚀"
                elif any(bye in message_lower for bye in farewells):
                    ai_response = "Goodbye! Remember: consistency is the key to success! 👋"
                else:
                    sentiment = analyze_sentiment(user_message)
                    if sentiment == "positive":
                        ai_response = random.choice(positive_responses)
                    elif sentiment == "negative":
                        ai_response = random.choice(negative_responses)
                    else:
                        ai_response = random.choice(neutral_responses)

                chat_history.append(("You", user_message))
                chat_history.append(("AI", ai_response))

        for sender, message in chat_history:
            st.markdown(f"**{sender}:** {message}")

    elif menu == "Test Prep & Time Management":
        st.header("📝 Test Prep & Time Management")
        st.subheader("Test Preparation:")
        st.write(improvement_strategies["test_prep"])

        st.subheader("Time Management:")
        st.write(improvement_strategies["time_management"])

        st.subheader("Homework Tips:")
        st.write(improvement_strategies["homework_tips"])

    elif menu == "Grade Predictor":
        st.header("📈 Predict Your Next Grade (No sklearn)")

        if not user_grades:
            st.warning("You need to enter some grades first.")
        else:
            subject = st.selectbox("Select a subject for prediction", list(user_grades.keys()))
            grades = user_grades[subject]

            if len(grades) < 2:
                st.warning("You need at least 2 grades to make a prediction.")
            else:
                X = np.array(range(1, len(grades) + 1))
                y = np.array(grades)

                slope, intercept = np.polyfit(X, y, 1)
                next_test = len(grades) + 1
                prediction = slope * next_test + intercept

                # Clip prediction between 0 and 10
                prediction = max(0, min(10, prediction))

                st.subheader(f"Predicted next grade in **{subject.title()}**: {prediction:.2f}")
                st.write("Prediction is based on your current grade trend using NumPy.")

    elif menu == "Logout":
        st.session_state.logged_in = False
        st.session_state.current_user = None
        st.success("Logged out successfully.")
        st.experimental_rerun()

if not st.session_state.logged_in:
    login_or_signup()
else:
    gradestore_app()
